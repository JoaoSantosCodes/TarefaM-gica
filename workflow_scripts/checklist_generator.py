#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CHECKLIST GENERATOR - TarefaM√°gica
=================================

Gera checklists automaticamente baseado no resumo do projeto.
Foco em:
- Funcionalidades principais
- Sistema de gamifica√ß√£o
- Interface
- Stack de desenvolvimento
- Roadmap
"""

import os
import sys
from pathlib import Path
from datetime import datetime

class ChecklistGenerator:
    def __init__(self, project_root="."):
        self.project_root = Path(project_root)
        
    def generate_checklists(self):
        """Gera os checklists baseados no resumo do projeto."""
        # Cria diret√≥rio de checklists se n√£o existir
        checklists_dir = self.project_root / 'checklists'
        checklists_dir.mkdir(exist_ok=True)
        
        # Gera os checklists espec√≠ficos do TarefaM√°gica
        self._generate_features_checklist(checklists_dir)
        self._generate_gamification_checklist(checklists_dir)
        self._generate_interface_checklist(checklists_dir)
        self._generate_technical_checklist(checklists_dir)
        self._generate_deployment_checklist(checklists_dir)
        
        print(f"\n‚úÖ Checklists gerados com sucesso em {checklists_dir}")

    def _generate_features_checklist(self, output_dir):
        """Gera checklist de funcionalidades principais."""
        content = f"""# CHECKLIST DE FUNCIONALIDADES

**üìÖ Data de Cria√ß√£o:** {datetime.now().strftime('%Y-%m-%d')}

## üë®‚Äçüë©‚Äçüëß Perfil Familiar - Admin (Pais)
- [ ] Criar tarefas com descri√ß√£o
- [ ] Definir valor por tarefa (limite R$10)
- [ ] Sistema de aprova√ß√£o de tarefas
- [ ] Hist√≥rico de tarefas realizadas
- [ ] Controle de saldo e recompensas
- [ ] Gerenciamento de perfis de crian√ßas

## üßí Perfil Familiar - Crian√ßa
- [ ] Visualiza√ß√£o de tarefas dispon√≠veis
- [ ] Upload de foto/v√≠deo da tarefa
- [ ] Marca√ß√£o de tarefa como conclu√≠da
- [ ] Visualiza√ß√£o de progresso
- [ ] Acompanhamento de saldo
- [ ] Personaliza√ß√£o de avatar

## üì± Funcionalidades Extras
- [ ] Notifica√ß√µes push
- [ ] Lembretes m√°gicos
- [ ] Estat√≠sticas para pais
- [ ] Modo mascote ajudante
- [ ] Sistema de dicas e elogios
- [ ] Tarefas recorrentes

## üéØ Prioridade: 1
"""
        
        output_file = output_dir / 'CHECKLIST_Funcionalidades.md'
        output_file.write_text(content, encoding='utf-8')

    def _generate_gamification_checklist(self, output_dir):
        """Gera checklist do sistema de gamifica√ß√£o."""
        content = f"""# CHECKLIST DE GAMIFICA√á√ÉO

**üìÖ Data de Cria√ß√£o:** {datetime.now().strftime('%Y-%m-%d')}

## üéÆ Sistema de N√≠veis
- [ ] Sistema de XP por tarefa
- [ ] Progress√£o de n√≠veis
- [ ] Desbloqueio de itens por n√≠vel
- [ ] Sistema de conquistas
- [ ] Badges/medalhas especiais
- [ ] Ranking entre irm√£os (opcional)

## üí∞ Sistema de Moedas
- [ ] Convers√£o R$ para moedas (1:1)
- [ ] Sistema de carteira virtual
- [ ] Loja de itens cosm√©ticos
- [ ] Sistema de pre√ßos din√¢micos
- [ ] Hist√≥rico de transa√ß√µes
- [ ] Integra√ß√£o com PIX (futuro)

## üé® Customiza√ß√£o
- [ ] Sistema de avatares
- [ ] Roupas desbloque√°veis
- [ ] Fundos personalizados
- [ ] Adesivos digitais
- [ ] Frases m√°gicas
- [ ] Temas especiais

## üéØ Prioridade: 2
"""
        
        output_file = output_dir / 'CHECKLIST_Gamificacao.md'
        output_file.write_text(content, encoding='utf-8')

    def _generate_interface_checklist(self, output_dir):
        """Gera checklist da interface."""
        content = f"""# CHECKLIST DE INTERFACE

**üìÖ Data de Cria√ß√£o:** {datetime.now().strftime('%Y-%m-%d')}

## üé® Design Visual
- [ ] Paleta de cores alegre
- [ ] Elementos m√°gicos (varinhas, estrelas)
- [ ] Mascotes animados
- [ ] √çcones ilustrados para tarefas
- [ ] Bot√µes grandes e claros
- [ ] Fontes leg√≠veis para crian√ßas

## üåì Temas
- [ ] Modo claro implementado
- [ ] Modo escuro implementado
- [ ] Transi√ß√£o suave entre temas
- [ ] Temas sazonais
- [ ] Temas desbloque√°veis
- [ ] Persist√™ncia da prefer√™ncia

## üì± Responsividade
- [ ] Layout adaptativo
- [ ] Suporte a diferentes telas
- [ ] Orienta√ß√£o retrato/paisagem
- [ ] Anima√ß√µes fluidas
- [ ] Feedback t√°til
- [ ] Gestos intuitivos

## üéØ Prioridade: 1
"""
        
        output_file = output_dir / 'CHECKLIST_Interface.md'
        output_file.write_text(content, encoding='utf-8')

    def _generate_technical_checklist(self, output_dir):
        """Gera checklist t√©cnico."""
        content = f"""# CHECKLIST T√âCNICO

**üìÖ Data de Cria√ß√£o:** {datetime.now().strftime('%Y-%m-%d')}

## üì± Frontend (Flutter)
- [ ] Setup do projeto Flutter
- [ ] Configura√ß√£o do Material Design
- [ ] Integra√ß√£o com Firebase
- [ ] Sistema de rotas
- [ ] Gerenciamento de estado
- [ ] Widgets personalizados

## ‚öôÔ∏è Backend (Firebase)
- [ ] Configura√ß√£o do Firestore
- [ ] Esquema do banco de dados
- [ ] Regras de seguran√ßa
- [ ] Autentica√ß√£o de usu√°rios
- [ ] Cloud Functions
- [ ] Storage para m√≠dias

## üîê Seguran√ßa
- [ ] Autentica√ß√£o segura
- [ ] Controle de acesso
- [ ] Prote√ß√£o de dados
- [ ] Backup autom√°tico
- [ ] Logs de atividade
- [ ] Conformidade LGPD

## üéØ Prioridade: 1
"""
        
        output_file = output_dir / 'CHECKLIST_Tecnico.md'
        output_file.write_text(content, encoding='utf-8')

    def _generate_deployment_checklist(self, output_dir):
        """Gera checklist de deploy e testes."""
        content = f"""# CHECKLIST DE DEPLOY

**üìÖ Data de Cria√ß√£o:** {datetime.now().strftime('%Y-%m-%d')}

## üß™ Testes
- [ ] Testes unit√°rios
- [ ] Testes de integra√ß√£o
- [ ] Testes de UI
- [ ] Testes de usabilidade
- [ ] Beta testing com fam√≠lias
- [ ] Feedback de usu√°rios

## üì± Google Play
- [ ] Conta de desenvolvedor
- [ ] Screenshots do app
- [ ] Descri√ß√£o e metadata
- [ ] Pol√≠ticas de privacidade
- [ ] Termos de uso
- [ ] Release beta

## üöÄ Lan√ßamento
- [ ] Corre√ß√£o de bugs
- [ ] Otimiza√ß√£o de performance
- [ ] Marketing inicial
- [ ] Suporte ao usu√°rio
- [ ] Monitoramento
- [ ] Atualiza√ß√µes planejadas

## üéØ Prioridade: 3
"""
        
        output_file = output_dir / 'CHECKLIST_Deploy.md'
        output_file.write_text(content, encoding='utf-8')

def main():
    """Fun√ß√£o principal."""
    try:
        print("\nüéØ GERADOR DE CHECKLISTS - TarefaM√°gica")
        print("=" * 50)
        
        # Usa o diret√≥rio atual ou o passado como argumento
        project_dir = sys.argv[1] if len(sys.argv) > 1 else "."
        
        generator = ChecklistGenerator(project_dir)
        generator.generate_checklists()
        
    except Exception as e:
        print(f"\n‚ùå Erro ao gerar checklists: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 