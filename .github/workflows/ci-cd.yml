name: 🚀 CI/CD Pipeline - TarefaMágica

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 🔒 SEGURANÇA
  security:
    name: 🔒 Análise de Segurança
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
          
      - name: 🛡️ Security Scan (Bandit)
        run: |
          bandit -r workflow/security/ -f json -o security-report.json || true
          
      - name: 🔍 Security Scan (Safety)
        run: |
          safety check --json --output safety-report.json || true
          
      - name: 📊 Security Report
        run: |
          echo "🔒 Security Analysis Complete"
          if [ -f security-report.json ]; then
            echo "📋 Bandit Report:"
            cat security-report.json | jq '.metrics._totals' || echo "No issues found"
          fi
          if [ -f safety-report.json ]; then
            echo "📋 Safety Report:"
            cat safety-report.json | jq '.[] | .package' || echo "No vulnerabilities found"
          fi

  # 🧪 TESTES
  test:
    name: 🧪 Testes Automatizados
    runs-on: ubuntu-latest
    needs: security
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-html
          pip install -r requirements.txt
          
      - name: 🧪 Run Tests
        run: |
          pytest tests/ --cov=workflow --cov-report=html --cov-report=xml --junitxml=test-results.xml
          
      - name: 📊 Test Coverage Report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          
      - name: 📋 Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            htmlcov/
            test-results.xml
            coverage.xml

  # 🔍 QUALIDADE DE CÓDIGO
  quality:
    name: 🔍 Qualidade de Código
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
          
      - name: 🎨 Code Formatting (Black)
        run: |
          black --check --diff workflow/ tests/
          
      - name: 📝 Import Sorting (isort)
        run: |
          isort --check-only --diff workflow/ tests/
          
      - name: 🔍 Linting (Flake8)
        run: |
          flake8 workflow/ tests/ --max-line-length=88 --extend-ignore=E203,W503
          
      - name: 🔍 Type Checking (MyPy)
        run: |
          mypy workflow/ --ignore-missing-imports

  # 📋 VALIDAÇÃO DE CHECKLISTS
  checklist-validation:
    name: 📋 Validação de Checklists
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: 📊 Run Checklist Analysis
        run: |
          python workflow_scripts/checklist_analyzer.py
          
      - name: 📋 Upload Analysis Results
        uses: actions/upload-artifact@v3
        with:
          name: checklist-analysis
          path: outputs/

  # 🏗️ BUILD
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [security, test, quality, checklist-validation]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build
          
      - name: 🏗️ Build Package
        run: |
          python -m build
          
      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  # 🚀 DEPLOY STAGING
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: 🔧 Setup Environment
        run: |
          echo "Setting up staging environment..."
          # Aqui você configuraria variáveis de ambiente para staging
          
      - name: 🧪 Run Staging Tests
        run: |
          echo "Running staging-specific tests..."
          # Testes específicos para staging
          
      - name: 📊 Health Check
        run: |
          echo "Performing health check..."
          # Verificação de saúde da aplicação
          
      - name: ✅ Deploy Success
        run: |
          echo "🚀 Deploy to staging successful!"
          echo "🌐 Staging URL: https://staging.tarefamagica.com"

  # 🚀 DEPLOY PRODUCTION
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: 🔧 Setup Environment
        run: |
          echo "Setting up production environment..."
          # Aqui você configuraria variáveis de ambiente para produção
          
      - name: 🧪 Run Production Tests
        run: |
          echo "Running production-specific tests..."
          # Testes específicos para produção
          
      - name: 📊 Health Check
        run: |
          echo "Performing health check..."
          # Verificação de saúde da aplicação
          
      - name: ✅ Deploy Success
        run: |
          echo "🚀 Deploy to production successful!"
          echo "🌐 Production URL: https://tarefamagica.com"

  # 🔄 ROLLBACK AUTOMATIZADO
  rollback:
    name: 🔄 Rollback Automatizado
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        
      - name: 🔄 Trigger Rollback
        run: |
          echo "🔄 Deploy falhou! Iniciando rollback automatizado..."
          
          # Aqui você executaria o script de rollback
          # ./deployment/deploy.sh rollback
          
          echo "📋 Rollback iniciado para ambiente: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}"
          
      - name: 📊 Rollback Health Check
        run: |
          echo "🏥 Verificando saúde após rollback..."
          # Verificação de saúde após rollback
          
      - name: 📧 Rollback Notification
        run: |
          echo "📧 Enviando notificação de rollback..."
          # Notificação de rollback para a equipe

  # 📊 NOTIFICAÇÕES
  notifications:
    name: 📊 Notificações
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, rollback]
    if: always()
    steps:
      - name: 📧 Send Success Notification
        if: success()
        run: |
          echo "✅ Pipeline completed successfully!"
          # Aqui você enviaria notificação de sucesso
          
      - name: 📧 Send Failure Notification
        if: failure()
        run: |
          echo "❌ Pipeline failed!"
          # Aqui você enviaria notificação de falha
          
      - name: 📧 Send Rollback Notification
        if: needs.rollback.result == 'success'
        run: |
          echo "🔄 Rollback executed successfully!"
          # Aqui você enviaria notificação de rollback 