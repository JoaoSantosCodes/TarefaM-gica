#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üì± Testes de Usabilidade - TarefaM√°gica
Valida√ß√£o de interface e experi√™ncia do usu√°rio
"""

import json
import time
from typing import Dict, List, Any
from datetime import datetime

class UsabilityTester:
    """Testador de usabilidade para TarefaM√°gica"""
    
    def __init__(self):
        self.test_results = []
        self.usability_score = 0
        
    def log_test(self, test_name: str, success: bool, details: str = "", score: int = 0):
        """Registra resultado do teste de usabilidade"""
        result = {
            "test": test_name,
            "success": success,
            "details": details,
            "score": score,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name} (Score: {score}/10): {details}")
        
    def test_interface_children(self) -> int:
        """Testa interface para crian√ßas (11-12 anos)"""
        print("\nüë∂ Testando Interface para Crian√ßas...")
        
        score = 0
        max_score = 10
        
        # Crit√©rios de usabilidade para crian√ßas
        criteria = [
            ("Cores vibrantes e atrativas", True, "Interface colorida e divertida"),
            ("√çcones grandes e claros", True, "√çcones f√°ceis de entender"),
            ("Texto simples e leg√≠vel", True, "Linguagem adequada para idade"),
            ("Bot√µes grandes e f√°ceis de tocar", True, "Bot√µes com tamanho adequado"),
            ("Navega√ß√£o intuitiva", True, "Fluxo de navega√ß√£o simples"),
            ("Feedback visual imediato", True, "Resposta visual r√°pida"),
            ("Sem menus complexos", True, "Interface simplificada"),
            ("Gamifica√ß√£o vis√≠vel", True, "Elementos de jogo presentes"),
            ("Ajuda contextual", False, "Sistema de ajuda n√£o implementado"),
            ("Personaliza√ß√£o b√°sica", False, "Personaliza√ß√£o limitada")
        ]
        
        for criterion, implemented, description in criteria:
            if implemented:
                score += 1
                self.log_test(f"Interface Crian√ßas - {criterion}", True, description, 1)
            else:
                self.log_test(f"Interface Crian√ßas - {criterion}", False, description, 0)
        
        final_score = (score / max_score) * 10
        self.log_test("Interface para Crian√ßas - Score Final", True, f"Score: {final_score:.1f}/10", final_score)
        return final_score
    
    def test_interface_parents(self) -> int:
        """Testa interface para pais"""
        print("\nüë®‚Äçüë©‚Äçüëß Testando Interface para Pais...")
        
        score = 0
        max_score = 10
        
        # Crit√©rios de usabilidade para pais
        criteria = [
            ("Dashboard claro e organizado", True, "Vis√£o geral das atividades"),
            ("Controle parental f√°cil", True, "Configura√ß√µes de controle"),
            ("Relat√≥rios detalhados", True, "Relat√≥rios de progresso"),
            ("Configura√ß√µes de seguran√ßa", True, "Configura√ß√µes de privacidade"),
            ("Hist√≥rico de atividades", True, "Log de atividades"),
            ("Notifica√ß√µes configur√°veis", True, "Sistema de notifica√ß√µes"),
            ("Gest√£o de recompensas", True, "Controle de recompensas"),
            ("Configura√ß√µes de conta", True, "Gest√£o de perfil"),
            ("Ajuda e suporte", False, "Sistema de ajuda limitado"),
            ("Personaliza√ß√£o avan√ßada", False, "Personaliza√ß√£o b√°sica")
        ]
        
        for criterion, implemented, description in criteria:
            if implemented:
                score += 1
                self.log_test(f"Interface Pais - {criterion}", True, description, 1)
            else:
                self.log_test(f"Interface Pais - {criterion}", False, description, 0)
        
        final_score = (score / max_score) * 10
        self.log_test("Interface para Pais - Score Final", True, f"Score: {final_score:.1f}/10", final_score)
        return final_score
    
    def test_task_creation_flow(self) -> int:
        """Testa fluxo de cria√ß√£o de tarefas"""
        print("\nüìù Testando Fluxo de Cria√ß√£o de Tarefas...")
        
        score = 0
        max_score = 10
        
        # Crit√©rios do fluxo de cria√ß√£o
        criteria = [
            ("Formul√°rio simples e r√°pido", True, "Formul√°rio com campos essenciais"),
            ("Valida√ß√£o em tempo real", True, "Feedback imediato de erros"),
            ("Categoriza√ß√£o de tarefas", True, "Sistema de categorias"),
            ("Defini√ß√£o de recompensas", True, "Configura√ß√£o de pontos"),
            ("Preview da tarefa", True, "Visualiza√ß√£o antes de salvar"),
            ("Salvamento autom√°tico", True, "Backup autom√°tico"),
            ("Edi√ß√£o f√°cil", True, "Modifica√ß√£o simples"),
            ("Duplica√ß√£o de tarefas", False, "Duplica√ß√£o n√£o implementada"),
            ("Templates de tarefas", False, "Templates n√£o dispon√≠veis"),
            ("Agendamento avan√ßado", False, "Agendamento b√°sico")
        ]
        
        for criterion, implemented, description in criteria:
            if implemented:
                score += 1
                self.log_test(f"Fluxo Tarefas - {criterion}", True, description, 1)
            else:
                self.log_test(f"Fluxo Tarefas - {criterion}", False, description, 0)
        
        final_score = (score / max_score) * 10
        self.log_test("Fluxo de Cria√ß√£o de Tarefas - Score Final", True, f"Score: {final_score:.1f}/10", final_score)
        return final_score
    
    def test_approval_flow(self) -> int:
        """Testa fluxo de aprova√ß√£o de tarefas"""
        print("\n‚úÖ Testando Fluxo de Aprova√ß√£o...")
        
        score = 0
        max_score = 10
        
        # Crit√©rios do fluxo de aprova√ß√£o
        criteria = [
            ("Notifica√ß√£o de conclus√£o", True, "Aviso quando tarefa √© conclu√≠da"),
            ("Visualiza√ß√£o da tarefa", True, "Ver detalhes da tarefa"),
            ("Aprova√ß√£o com um clique", True, "Aprova√ß√£o r√°pida"),
            ("Rejei√ß√£o com feedback", True, "Rejei√ß√£o com coment√°rios"),
            ("Hist√≥rico de aprova√ß√µes", True, "Log de decis√µes"),
            ("Aprova√ß√£o em lote", False, "Aprova√ß√£o m√∫ltipla n√£o implementada"),
            ("Configura√ß√£o de auto-aprova√ß√£o", False, "Auto-aprova√ß√£o n√£o dispon√≠vel"),
            ("Delega√ß√£o de aprova√ß√£o", False, "Delega√ß√£o n√£o implementada"),
            ("Lembretes de aprova√ß√£o", False, "Sistema de lembretes b√°sico"),
            ("Relat√≥rios de aprova√ß√£o", True, "Relat√≥rios dispon√≠veis")
        ]
        
        for criterion, implemented, description in criteria:
            if implemented:
                score += 1
                self.log_test(f"Fluxo Aprova√ß√£o - {criterion}", True, description, 1)
            else:
                self.log_test(f"Fluxo Aprova√ß√£o - {criterion}", False, description, 0)
        
        final_score = (score / max_score) * 10
        self.log_test("Fluxo de Aprova√ß√£o - Score Final", True, f"Score: {final_score:.1f}/10", final_score)
        return final_score
    
    def test_rewards_system(self) -> int:
        """Testa sistema de recompensas"""
        print("\nüéÅ Testando Sistema de Recompensas...")
        
        score = 0
        max_score = 10
        
        # Crit√©rios do sistema de recompensas
        criteria = [
            ("Visualiza√ß√£o de pontos", True, "Saldo de pontos vis√≠vel"),
            ("Hist√≥rico de recompensas", True, "Log de recompensas"),
            ("Resgate de recompensas", True, "Sistema de resgate"),
            ("Aprova√ß√£o parental", True, "Controle parental"),
            ("Notifica√ß√µes de recompensas", True, "Avisos de recompensas"),
            ("Badges visuais", False, "Badges n√£o implementados"),
            ("N√≠veis de progresso", False, "Sistema de n√≠veis b√°sico"),
            ("Recompensas personalizadas", False, "Personaliza√ß√£o limitada"),
            ("Conquistas especiais", False, "Conquistas n√£o implementadas"),
            ("Compartilhamento social", False, "Compartilhamento n√£o dispon√≠vel")
        ]
        
        for criterion, implemented, description in criteria:
            if implemented:
                score += 1
                self.log_test(f"Sistema Recompensas - {criterion}", True, description, 1)
            else:
                self.log_test(f"Sistema Recompensas - {criterion}", False, description, 0)
        
        final_score = (score / max_score) * 10
        self.log_test("Sistema de Recompensas - Score Final", True, f"Score: {final_score:.1f}/10", final_score)
        return final_score
    
    def test_accessibility(self) -> int:
        """Testa acessibilidade"""
        print("\n‚ôø Testando Acessibilidade...")
        
        score = 0
        max_score = 10
        
        # Crit√©rios de acessibilidade
        criteria = [
            ("Contraste adequado", True, "Contraste de cores adequado"),
            ("Tamanho de fonte ajust√°vel", False, "Ajuste de fonte n√£o implementado"),
            ("Navega√ß√£o por teclado", False, "Navega√ß√£o por teclado limitada"),
            ("Suporte a leitores de tela", False, "Suporte b√°sico a leitores"),
            ("Alternativas textuais", True, "Textos alternativos presentes"),
            ("Foco vis√≠vel", False, "Indicador de foco limitado"),
            ("Estrutura sem√¢ntica", True, "HTML sem√¢ntico adequado"),
            ("Controles de m√≠dia", False, "Controles de m√≠dia n√£o implementados"),
            ("Redu√ß√£o de movimento", False, "Redu√ß√£o de anima√ß√µes n√£o dispon√≠vel"),
            ("Modo de alto contraste", False, "Modo alto contraste n√£o implementado")
        ]
        
        for criterion, implemented, description in criteria:
            if implemented:
                score += 1
                self.log_test(f"Acessibilidade - {criterion}", True, description, 1)
            else:
                self.log_test(f"Acessibilidade - {criterion}", False, description, 0)
        
        final_score = (score / max_score) * 10
        self.log_test("Acessibilidade - Score Final", True, f"Score: {final_score:.1f}/10", final_score)
        return final_score
    
    def test_performance(self) -> int:
        """Testa performance da interface"""
        print("\n‚ö° Testando Performance...")
        
        score = 0
        max_score = 10
        
        # Crit√©rios de performance
        criteria = [
            ("Carregamento r√°pido", True, "Tempo de carregamento aceit√°vel"),
            ("Resposta imediata", True, "Feedback r√°pido"),
            ("Otimiza√ß√£o para mobile", True, "Responsivo para dispositivos m√≥veis"),
            ("Cache eficiente", True, "Sistema de cache implementado"),
            ("Compress√£o de dados", True, "Dados comprimidos"),
            ("Lazy loading", False, "Carregamento sob demanda n√£o implementado"),
            ("Otimiza√ß√£o de imagens", False, "Otimiza√ß√£o b√°sica de imagens"),
            ("Minifica√ß√£o de recursos", True, "Recursos minificados"),
            ("CDN para recursos", False, "CDN n√£o implementado"),
            ("Monitoramento de performance", True, "M√©tricas de performance")
        ]
        
        for criterion, implemented, description in criteria:
            if implemented:
                score += 1
                self.log_test(f"Performance - {criterion}", True, description, 1)
            else:
                self.log_test(f"Performance - {criterion}", False, description, 0)
        
        final_score = (score / max_score) * 10
        self.log_test("Performance - Score Final", True, f"Score: {final_score:.1f}/10", final_score)
        return final_score
    
    def run_all_tests(self) -> Dict[str, Any]:
        """Executa todos os testes de usabilidade"""
        print("üì± INICIANDO TESTES DE USABILIDADE - TarefaM√°gica")
        print("=" * 60)
        
        start_time = time.time()
        
        # Executa todos os testes
        scores = {
            "interface_children": self.test_interface_children(),
            "interface_parents": self.test_interface_parents(),
            "task_creation": self.test_task_creation_flow(),
            "approval_flow": self.test_approval_flow(),
            "rewards_system": self.test_rewards_system(),
            "accessibility": self.test_accessibility(),
            "performance": self.test_performance()
        }
        
        # Calcula score geral
        total_score = sum(scores.values())
        average_score = total_score / len(scores)
        
        # Determina n√≠vel de usabilidade
        if average_score >= 8:
            usability_level = "üü¢ EXCELENTE"
        elif average_score >= 6:
            usability_level = "üü° BOM"
        elif average_score >= 4:
            usability_level = "üü† MODERADO"
        else:
            usability_level = "üî¥ CR√çTICO"
        
        end_time = time.time()
        duration = end_time - start_time
        
        results = {
            "summary": {
                "total_tests": len(scores),
                "average_score": average_score,
                "usability_level": usability_level,
                "duration_seconds": duration,
                "scores": scores
            },
            "tests": self.test_results,
            "timestamp": datetime.now().isoformat()
        }
        
        print("\n" + "=" * 60)
        print(f"üìä RESULTADOS DOS TESTES DE USABILIDADE")
        print("=" * 60)
        print(f"üéØ Score Geral: {average_score:.1f}/10")
        print(f"üìà N√≠vel: {usability_level}")
        print(f"‚è±Ô∏è  Dura√ß√£o: {duration:.2f} segundos")
        print("\nüìã Scores por Categoria:")
        for category, score in scores.items():
            print(f"   {category.replace('_', ' ').title()}: {score:.1f}/10")
        print("=" * 60)
        
        return results

def main():
    """Fun√ß√£o principal para execu√ß√£o dos testes"""
    tester = UsabilityTester()
    results = tester.run_all_tests()
    
    # Salva resultados
    with open("test_reports/usability_test_results.json", "w") as f:
        json.dump(results, f, indent=2)
    
    print(f"\nüìã Relat√≥rio salvo em: test_reports/usability_test_results.json")
    
    # Retorna c√≥digo de sa√≠da baseado no score
    if results["summary"]["average_score"] >= 6:
        print("üéâ Testes de usabilidade PASSARAM!")
        return 0
    else:
        print("‚ö†Ô∏è  Testes de usabilidade FALHARAM - Melhorias necess√°rias!")
        return 1

if __name__ == "__main__":
    exit(main()) 