version: '3.8'

services:
  # Backend API
  tarefamagica-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: tarefamagica-api-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://tarefamagica:${DB_PASSWORD}@postgres:5432/tarefamagica_prod
      - JWT_SECRET=${JWT_SECRET}
      - PIX_API_KEY=${PIX_API_KEY}
      - FIREBASE_CONFIG=${FIREBASE_CONFIG}
    ports:
      - "3000:3000"
    depends_on:
      - postgres
      - redis
    networks:
      - tarefamagica-network
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: tarefamagica-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=tarefamagica_prod
      - POSTGRES_USER=tarefamagica
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - tarefamagica-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tarefamagica-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tarefamagica-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: tarefamagica-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - tarefamagica-api
    networks:
      - tarefamagica-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: tarefamagica-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tarefamagica-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: tarefamagica-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - tarefamagica-network

  # Backup Service
  backup:
    image: alpine:latest
    container_name: tarefamagica-backup-prod
    restart: unless-stopped
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data
    environment:
      - DB_HOST=postgres
      - DB_NAME=tarefamagica_prod
      - DB_USER=tarefamagica
      - DB_PASSWORD=${DB_PASSWORD}
    command: |
      sh -c '
      apk add --no-cache postgresql-client
      while true; do
        echo "Starting backup at $(date)"
        pg_dump -h $DB_HOST -U $DB_USER -d $DB_NAME > /backups/backup_$(date +%Y%m%d_%H%M%S).sql
        echo "Backup completed at $(date)"
        sleep 86400
      done
      '
    depends_on:
      - postgres
    networks:
      - tarefamagica-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  tarefamagica-network:
    driver: bridge 